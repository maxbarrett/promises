{
	"html": "Notice here that the $watch specified items as a string. This is possible because the $watch function can take either a function (as we did previously) or a string. If a string is passed to the $watch function, then it will be evaluated as an expression in the scope of the $scope it’s called on. This strategy might work well for your app. However, since we’re watching the items array, Angular will have to make a copy of it to compare it for us. For a large list of items, it may perform better if we just recalculate the bill properties every time Angular eval‐ uates the page. We can do this by creating a $watch with only a watchFn that will recal‐ culate our properties like this:"
}